/*
 * This file is part of Applied Energistics 2.
 * Copyright (c) 2013 - 2015, AlgorithmX2, All rights reserved.
 *
 * Applied Energistics 2 is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Applied Energistics 2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Applied Energistics 2.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */

plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    shaded {
        transitive = false
    }
    portaforgyImplementation.extendsFrom(compileClasspath)

    internal {
        visible = false
        canBeConsumed = false
        canBeResolved = false
    }
    configurations.compileClasspath.extendsFrom(internal)
    configurations.runtimeClasspath.extendsFrom(internal)
    configurations.testCompileClasspath.extendsFrom(internal)
    configurations.testRuntimeClasspath.extendsFrom(internal)
}

dependencies {
    // To be copied into the jar file
    shaded project(path: ':libs:markdown', configuration: "archives")
    shaded "io.methvin:directory-watcher:${directory_watcher_version}"
    shaded "org.yaml:snakeyaml:${snakeyaml_version}"

    internal project(':libs:markdown')
    // Do not inherit any transitive dependencies here since we rely on those dependencies being
    // present in Minecrafts own dependencies already.
    internal("io.methvin:directory-watcher:${directory_watcher_version}") {
        transitive = false
    }
    internal("org.yaml:snakeyaml:${snakeyaml_version}")  {
        transitive = false
    }

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.19.2:2022.11.27@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Always depend on the REI API to compile
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
        exclude group: "org.yaml" // snakeyaml
        exclude group: "blue.endless" // jankson
    }
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
        exclude group: "org.yaml" // snakeyaml
        exclude group: "blue.endless" // jankson
    }

    if (project.runtime_itemlist_mod == "jei") {
        modLocalRuntime modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-fabric:${jei_version}") {
            exclude group: "mezz.jei"
        }
    } else if (project.runtime_itemlist_mod == "rei") {
        modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-fabric:${jei_version}") {
            exclude group: "mezz.jei"
        }

        // Manually override architectury TODO remove once REI's dependency is fixed
        modLocalRuntime "dev.architectury:architectury-fabric:6.2.43"
        modLocalRuntime modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    } else {
        throw new GradleException("Invalid runtime_itemlist_mod value: " + project.runtime_itemlist_mod)
    }

    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    if (project.runtime_tooltip_mod == "wthit") {
        modLocalRuntime("mcp.mobius.waila:wthit:fabric-${project.wthit_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    modCompileOnly("curse.maven:jade-324717:${project.jade_file_id}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    if (project.runtime_tooltip_mod == "jade") {
        modLocalRuntime("curse.maven:jade-324717:${project.jade_file_id}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	// Create - dependencies are added transitively
	modCompileOnly("com.simibubi.create:create-fabric-1.19.2:0.5.0f-776") {
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "dev.onyxstudios.cardinal-components-api"
            exclude group: "dev.cafeteria"
    }
	modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
	modLocalRuntime("com.terraformersmc:modmenu:4.2.0-beta.2")

    internal 'com.google.code.findbugs:jsr305:3.0.2'

    // unit test dependencies
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.8.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    testImplementation("org.junit.platform:junit-platform-launcher:1.8.1")
    testImplementation("org.assertj:assertj-core:3.19.0")
    testImplementation("com.google.guava:guava-testlib:21.0")
    testImplementation("org.mockito:mockito-junit-jupiter:4.0.0")
    testImplementation("org.mockito:mockito-inline:4.0.0")
}

archivesBaseName = artifact_basename

allprojects {
    group = artifact_group

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://maven.shedaniel.me/"
            content {
                includeGroup "me.shedaniel"
                includeGroup "me.shedaniel.cloth"
                includeGroup "dev.architectury"
            }
        }
        maven {
            url "https://maven.bai.lol"
            content {
                includeGroup "mcp.mobius.waila"
                includeGroup "lol.bai"
            }
        }
        maven {
            url "https://maven.parchmentmc.net/"
            content {
                includeGroup "org.parchmentmc.data"
            }
        }
        // For the "No Indium?" mod
        maven {
            url = 'https://maven.cafeteria.dev/releases/'
            content {
                includeGroup "me.luligabi"
            }
        }

        maven {
            name 'modmaven'
            url "https://modmaven.dev/"
            content {
                includeGroup "mezz.jei"
            }
        }

        maven {
            name 'cursemaven'
            url "https://www.cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
        maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
        maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
        maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
        maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
        maven { url = "https://api.modrinth.com/maven" } // LazyDFU
        maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
        maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
        maven { url = "https://cursemaven.com" } // Forge Config API Port
        maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
        maven { url = "https://maven.tterrag.com/" } // Flywheel
    }

    // ensure everything uses UTF-8 and not some random codepage chosen by gradle
    compileJava.options.encoding = 'UTF-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = false
        options.compilerArgs << "-Xmaxerrs" << "9999"
    }
}

///////////////////
// Version Number
version = version_major + "." + version_minor + "." + version_patch

ext.pr = System.getenv('PR_NUMBER') ?: ""
if (ext.pr) {
    version = version + "+pr." + ext.pr
}

ext.branch = System.getenv('BRANCH') ?: ""
if (ext.branch) {
    version = version + "+branch." + ext.branch
}

ext.tag = System.getenv('TAG') ?: ""
if (ext.tag) {
    if (!ext.tag.startsWith("fabric/v")) {
        throw new GradleException("Tags for the fabric version should start with fabric/: ${ext.tag}")
    }

    version = ext.tag.substring("fabric/v".length())
    // Validate that the rest is a semver version
    if (version ==~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/) {
        if (System.getenv("GITHUB_ENV")) {
            def envFile = new File(System.getenv("GITHUB_ENV"))
            envFile.append("VERSION=${version}")
        }
    } else {
        throw new GradleException("Invalid semver: $version")
    }
}

ext.isAlpha = project.version.contains("alpha")
ext.isBeta = project.version.contains("beta")

sourceSets {
    portaforgy
    main {
        compileClasspath += sourceSets.portaforgy.output
        runtimeClasspath += sourceSets.portaforgy.output
        resources.srcDirs += 'src/generated/resources'
        java.srcDirs += 'src/nsmp/java'
        resources.srcDirs += 'src/nsmp/res'
    }
    test {
        compileClasspath += sourceSets.portaforgy.output
        runtimeClasspath += sourceSets.portaforgy.output
    }
}

////////////////////
// Forge/Minecraft
loom {
    accessWidenerPath = file("src/main/resources/ae2.accesswidener")

    runs {
        client {
            programArgs "--username", "AE2Dev"
            property "appeng.tests", "true"
        }
        datagen {
            client()
            source "main"
            property "appeng.generateData", "true"
            property "appeng.generateData.outputPath", file("src/generated/resources").absolutePath
            property "appeng.generateData.existingData", file("src/main/resources").absolutePath
        }

        // Use to run the tests
        gametest {
            server()
            name "Game Test"
            property "appeng.tests", "true"
            vmArg "-Dfabric-api.gametest"
            runDir "build/gametest"
            source sourceSets.test
        }
    }
}

// For reproducible results, the world should be deleted before each run
task cleanGametestWorld(type: Delete) {
    delete "build/gametest"
}
tasks.runGametest.dependsOn cleanGametestWorld

//////////////
// Artifacts
processResources {
    exclude '.cache'

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

jar.enabled = false // Replaced by "shadowJar"

shadowJar {
    finalizedBy 'remapJar'

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title"     : "Applied Energistics 2",
                "Specification-Vendor"    : "TeamAppliedEnergistics",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "TeamAppliedEnergistics",
                "MixinConfigs"            : "ae2.mixins.json"
        ])
    }

    relocate "io.methvin", "appeng.shaded.methvin"
    relocate "org.yaml.snakeyaml", "appeng.shaded.snakeyaml"

    configurations = [project.configurations.shaded]
    archiveClassifier = jar.archiveClassifier
    destinationDirectory = jar.destinationDirectory
}

remapJar {
    inputFile = shadowJar.archiveFile
}

def publicApiIncludePatterns = {
    exclude "**/*Internal.*"
    exclude "**/*Internal\$*.*"
    include "appeng/api/**"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}
javadoc publicApiIncludePatterns

task javadocJar(type: Jar, dependsOn: javadoc, group: "build") {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}
// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

task apiJar(type: Jar, group: "build") {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
}
apiJar publicApiIncludePatterns

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}
